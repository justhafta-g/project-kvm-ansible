---
#check ubuntu cloud image
- name: check if ubuntu cloud image exist 
  stat: path={{ image_base_dir }}{{ image_base_name }}
  register: image_base_stat  

#get ubuntu cloud image and store to images
- name: get ubuntu cloud image if not exist 
  become: true
  get_url:
    url: "https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img"
    dest: "{{ image_base_dir }}"
  when: image_base_stat.stat.exists == false

#make snapshot of base image 
- name: get copy of original image
  stat: path=/var/lib/libvirt/images/snapshot-{{image_custom_name}}.qcow2
  register: image_base_name_stat  

  #create snap for vm01
- name: rename exist base image
  command: qemu-img create -b /var/lib/libvirt/images/bionic-server-cloudimg-amd64.img -f qcow2 /var/lib/libvirt/images/snapshot-{{image_custom_name}}.qcow2 5G
  when: image_base_name_stat.stat.exists == false

#cheking forward state 
- name: get info about forward state 
  command: cat /proc/sys/net/ipv4/ip_forward
  register: forward_state  

- name: setiing forward state on host
  command: sudo sysctl -w net.ipv4.ip_forward=1
  when: forward_state == 0

#check folders for vms
- name: check folders for vms
  stat: path="{{ item }}"
  register: vm_folder_stat
  with_items: 
  - "{{ vm_folders }}"

- name: create folders for vms if not exist
  file:  
    path: "{{ item.item }}"
    state: directory 
  when: item.stat.exists == false
  with_items: 
  - "{{ vm_folder_stat.results }}" 

#check template files to vm dir locations, template iptable script to libvirt 
- name: template a file to vms folders
  become: true
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items: 
     - { src: 'templates/vm01_cloud-config.yml.j2', dest: "/var/lib/libvirt/images/vm01/cloud_init.cfg" }
     - { src: 'templates/vm01_network-config.yml.j2', dest: "/var/lib/libvirt/images/vm01/network_config_static.cfg" }
     - { src: 'templates/vm02_cloud-config.yml.j2', dest: "/var/lib/libvirt/images/vm02/cloud_init.cfg" }
     - { src: 'templates/vm02_network-config.yml.j2', dest: "/var/lib/libvirt/images/vm02/network_config_static.cfg" }
     - { src: 'templates/iptables_ALL.sh.j2', dest: "/var/lib/libvirt/iptables_ALL.sh" }

- name: copy images to vms folders 
  copy: 
    src: "{{ image_base_dir }}snapshot-{{ image_custom_name }}.qcow2"
    dest: "{{ item }}"
    force: no
    remote_src: yes
  with_items:
    - "{{ vm_images }}"

- name: ensure that the network is active
  become: true
  virt_net:
    state: active
    name: default
    uri: "{{ libvirt_uri }}"

#get info about iptable script
- name: get info iptable roole
  stat: path=/var/lib/libvirt/iptables_ALL.sh
  register: image_base_name_stat  

#run iptable script
- name: set iptable roole if exist
  become: true
  shell: /var/lib/libvirt/iptables_ALL.sh
  args:
    executable: /bin/bash
  ignore_errors: true
  when: image_base_name_stat.stat.exists == true

