---
- name: install kvm packages on Debian
  package:
    name:
      - bridge-utils
      - genisoimage
      - libguestfs-tools
      - libnss-libvirt
      - libosinfo-bin
      - libvirt-clients
      - libvirt-daemon-system
      - libvirt-dev
      - python-lxml
      - python3-libvirt
      - qemu-kvm
      - qemu-utils
      - virt-top
      - virtinst
      - cloud-init
    state: latest
    update_cache: yes
    cache_valid_time: 5400
    allow_unauthenticated: yes
  become: true
  tags:
    - packages
    - kvm

#checking libvirt demon
- name: Enable service libvirt, and start if not started
  service:
    name: libvirtd
    enabled: yes
    state: started

#adding the same user that`s running ansible
- name: adding existing user ansible to group libvirt/-qemu
  become: true
  user:
    name: "{{ansible_user}}"
    groups: libvirt,libvirt-qemu
    # if append is not set to yes, the user is removed from all other groups and gets added only to this one!
    append: yes

# Facts will be available as 'ansible_libvirt_pools'
- name: gather facts on existing virsh pool
  become: true
  virt_pool:
    command: facts
    uri: "{{ libvirt_uri }}"

#checks if the pool is already created
- name: create a image_pool_dir
  file:
    path: "{{ image_pool_dir }}"
    owner: "{{ ansible_user }}"
    group: libvirt
    recurse: yes
    mode: '0755'
  become: true

#create dir for storing libvirt images, ignores it if itâ€™s already there
- name: add a storage pool for storing libvirt images if Pool doesn't already exists
  virt_pool:
    command: info
    name: "{{ image_pool_name }}"
    xml: '{{ lookup("template", "pool/dir.xml.j2") }}'
    uri: "{{ libvirt_uri }}"
  when: image_pool_name not in ansible_libvirt_pools

#building the image pool and starting the image pool, if needed 
- block:
  - name: build the storage pool
    virt_pool:
      command: build
      name: "{{ image_pool_name }}"
      uri: "{{ libvirt_uri }}"

  - name: start the storage pool
    virt_pool:
      command: create
      name: "{{ image_pool_name }}"
      uri: "{{ libvirt_uri }}"
  when: ansible_libvirt_pools["{{ image_pool_name }}"].state != "active"
  
  #seting the image pool to autostart and ensure that the image pool is active
- name: autostart the storage pool
  virt_pool:
    autostart: yes      
    name: "{{ image_pool_name }}"
    uri: "{{ libvirt_uri }}"

- name: ensure that the pool is active
  virt_pool:
    state: active
    name: "{{ image_pool_name }}"
    uri: "{{ libvirt_uri }}"